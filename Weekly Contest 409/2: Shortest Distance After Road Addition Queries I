class Solution {
public:
    int solve(int n, const vector<vector<pair<int, int>>>& g, int s, int e) {
        vector<int> d(n, 1e6);
        d[s] = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, s});

        while (!pq.empty()) {
            auto [c, u] = pq.top();
            pq.pop();

            if (c > d[u]) continue;

            for (auto [v, weight] : g[u]) {
                if (d[u] + weight < d[v]) {
                    d[v] = d[u] + weight;
                    pq.push({d[v], v});
                }
            }
        }

        return d[e];
    }
    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {
        vector<vector<pair<int, int>>> g(n);
        for (int i=0; i<n-1; ++i) {
            g[i].push_back({i + 1, 1});
        }

        vector<int> ans;
        for (auto it : queries) {
            int u = it[0], v = it[1];
            g[u].push_back({v, 1});
            
            ans.push_back(solve(n, g, 0, n - 1));
        }

        return ans;
    }
};
