class Solution {
public:
    int m=1e9;
    int numberOfSubstrings(string s) {
        int n = (int)s.size();
        vector<int> one(n + 1, 0), zero(n + 1, 0);
        for(int i = 1; i <= n; i++){
            one[i] = one[i - 1] + (s[i - 1] == '1');
            zero[i] = zero[i - 1] + zero[i] + (s[i - 1] == '0');
        }
        int res = 0;
        for(int i = 1; i <= n; i++){
            for(int j = i; j <= n; ){
                int o = one[j] - one[i - 1], z = zero[j] - zero[i - 1];
                if(o >= z * z){
                    int zero_needed = sqrt(o);
                    res += min(n - j + 1, (zero_needed - z + 1));
                    j += (zero_needed - z + 1);
                } else {
                    j += (z * z - o);
                }
            }
        }
        return res;
    }
};
